{
  "version": 3,
  "sources": ["../src/copy.js", "../src/index.js"],
  "sourcesContent": ["import fs from 'fs';\r\nimport path from 'path';\r\n\r\n/**\r\n * Check if the path is a file.\r\n * @param {string} str - The path to check.\r\n * @returns {boolean} - Returns true if the path is a file.\r\n */\r\nexport function isPathToFile(str) {\r\n    return !!path.extname(str);\r\n}\r\n\r\n/**\r\n * Ensure that the directory exists.\r\n * @param {string} dir - The directory to check.\r\n */\r\nexport function ensureDirectoryExists(dir) {\r\n    try {\r\n        fs.accessSync(dir);\r\n    } catch {\r\n        fs.mkdirSync(dir, { recursive: true });\r\n    }\r\n}\r\n/**\r\n * Copy a file synchronously.\r\n * @param {string} source - The source file path.\r\n * @param {string} target - The target file path.\r\n */\r\nexport function copyFileSync(source, target) {\r\n    if (isPathToFile(target)) {\r\n        const targetDir = path.dirname(target);\r\n\r\n        ensureDirectoryExists(targetDir);\r\n        fs.copyFileSync(source, target);\r\n    } else {\r\n        ensureDirectoryExists(target);\r\n        fs.copyFileSync(source, path.join(target, path.basename(source)));\r\n    }\r\n}\r\n\r\n/**\r\n * Copy a folder recursively synchronously.\r\n * @param {string} source - The source folder path.\r\n * @param {string} target - The target folder path.\r\n * @param {boolean} copyWithFolder - Copy the folder with the folder.\r\n */\r\nexport function copyFolderRecursiveSync(source, target, copyWithFolder) {\r\n    if (copyWithFolder) {\r\n        const folder = path.join(target, path.basename(source));\r\n\r\n        ensureDirectoryExists(folder);\r\n\r\n        return copyFolderRecursiveSync(source, folder);\r\n    }\r\n\r\n    ensureDirectoryExists(target);\r\n\r\n    if (fs.lstatSync(source).isDirectory()) {\r\n        const files = fs.readdirSync(source);\r\n\r\n        for (const file of files) {\r\n            const curSource = path.join(source, file);\r\n\r\n            if (fs.lstatSync(curSource).isDirectory()) {\r\n                copyFolderRecursiveSync(curSource, path.join(target, file));\r\n            } else {\r\n                copyFileSync(curSource, target);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Perform the copy operation.\r\n * @param {object} options - The options object.\r\n * @param {string | string[]} options.source - The source folder path.\r\n * @param {string | string[]} options.target - The target folder path.\r\n * @param {boolean} options.copyWithFolder - Copy the folder with the folder.\r\n */\r\nexport function performCopy({ source, target, copyWithFolder }) {\r\n    if (Array.isArray(target)) {\r\n        for (const targetItem of target) {\r\n            performCopy({ source, target: targetItem, copyWithFolder });\r\n        }\r\n    } else if (Array.isArray(source) && !Array.isArray(target)) {\r\n        for (const sourceItem of source) {\r\n            performCopy({ source: sourceItem, target, copyWithFolder });\r\n        }\r\n    } else if (fs.existsSync(source)) {\r\n        if (fs.lstatSync(source).isFile()) {\r\n            copyFileSync(source, target);\r\n        } else if (fs.lstatSync(source).isDirectory()) {\r\n            copyFolderRecursiveSync(source, target, copyWithFolder);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Copy files synchronously.\r\n * @param {object} options - The options object.\r\n * @param {string | string[]} options.source - The source folder path.\r\n * @param {string | string[]} options.target - The target folder path.\r\n * @param {boolean} options.copyWithFolder - Copy the folder with the folder.\r\n */\r\nexport function copy({ source, target, copyWithFolder }) {\r\n    console.log('Copying files...');\r\n\r\n    if (fs.existsSync(target)) {\r\n        fs.rmSync(target, { recursive: true });\r\n    }\r\n\r\n    performCopy({ source, target, copyWithFolder });\r\n\r\n    console.log('Files copied.');\r\n}\r\n\r\nexport default copy;\r\n", "import copy from './copy.js';\r\n\r\nexport default ({ source, target, copyWithFolder }) => {\r\n    return {\r\n        name: 'copy',\r\n        setup(build) {\r\n            build.onEnd(() => copy({ source, target, copyWithFolder }));\r\n        },\r\n    };\r\n};\r\n"],
  "mappings": "AAAA,OAAOA,MAAQ,KACf,OAAOC,MAAU,OAOV,SAASC,EAAaC,EAAK,CAC9B,MAAO,CAAC,CAACF,EAAK,QAAQE,CAAG,CAC7B,CAMO,SAASC,EAAsBC,EAAK,CACvC,GAAI,CACAL,EAAG,WAAWK,CAAG,CACrB,MAAQ,CACJL,EAAG,UAAUK,EAAK,CAAE,UAAW,EAAK,CAAC,CACzC,CACJ,CAMO,SAASC,EAAaC,EAAQC,EAAQ,CACzC,GAAIN,EAAaM,CAAM,EAAG,CACtB,IAAMC,EAAYR,EAAK,QAAQO,CAAM,EAErCJ,EAAsBK,CAAS,EAC/BT,EAAG,aAAaO,EAAQC,CAAM,CAClC,MACIJ,EAAsBI,CAAM,EAC5BR,EAAG,aAAaO,EAAQN,EAAK,KAAKO,EAAQP,EAAK,SAASM,CAAM,CAAC,CAAC,CAExE,CAQO,SAASG,EAAwBH,EAAQC,EAAQG,EAAgB,CACpE,GAAIA,EAAgB,CAChB,IAAMC,EAASX,EAAK,KAAKO,EAAQP,EAAK,SAASM,CAAM,CAAC,EAEtD,OAAAH,EAAsBQ,CAAM,EAErBF,EAAwBH,EAAQK,CAAM,CACjD,CAIA,GAFAR,EAAsBI,CAAM,EAExBR,EAAG,UAAUO,CAAM,EAAE,YAAY,EAAG,CACpC,IAAMM,EAAQb,EAAG,YAAYO,CAAM,EAEnC,QAAWO,KAAQD,EAAO,CACtB,IAAME,EAAYd,EAAK,KAAKM,EAAQO,CAAI,EAEpCd,EAAG,UAAUe,CAAS,EAAE,YAAY,EACpCL,EAAwBK,EAAWd,EAAK,KAAKO,EAAQM,CAAI,CAAC,EAE1DR,EAAaS,EAAWP,CAAM,CAEtC,CACJ,CACJ,CASO,SAASQ,EAAY,CAAE,OAAAT,EAAQ,OAAAC,EAAQ,eAAAG,CAAe,EAAG,CAC5D,GAAI,MAAM,QAAQH,CAAM,EACpB,QAAWS,KAAcT,EACrBQ,EAAY,CAAE,OAAAT,EAAQ,OAAQU,EAAY,eAAAN,CAAe,CAAC,UAEvD,MAAM,QAAQJ,CAAM,GAAK,CAAC,MAAM,QAAQC,CAAM,EACrD,QAAWU,KAAcX,EACrBS,EAAY,CAAE,OAAQE,EAAY,OAAAV,EAAQ,eAAAG,CAAe,CAAC,OAEvDX,EAAG,WAAWO,CAAM,IACvBP,EAAG,UAAUO,CAAM,EAAE,OAAO,EAC5BD,EAAaC,EAAQC,CAAM,EACpBR,EAAG,UAAUO,CAAM,EAAE,YAAY,GACxCG,EAAwBH,EAAQC,EAAQG,CAAc,EAGlE,CASO,SAASQ,EAAK,CAAE,OAAAZ,EAAQ,OAAAC,EAAQ,eAAAG,CAAe,EAAG,CACrD,QAAQ,IAAI,kBAAkB,EAE1BX,EAAG,WAAWQ,CAAM,GACpBR,EAAG,OAAOQ,EAAQ,CAAE,UAAW,EAAK,CAAC,EAGzCQ,EAAY,CAAE,OAAAT,EAAQ,OAAAC,EAAQ,eAAAG,CAAe,CAAC,EAE9C,QAAQ,IAAI,eAAe,CAC/B,CAEA,IAAOS,EAAQD,EClHf,IAAOE,EAAQ,CAAC,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,eAAAC,CAAe,KACtC,CACH,KAAM,OACN,MAAMC,EAAO,CACTA,EAAM,MAAM,IAAMC,EAAK,CAAE,OAAAJ,EAAQ,OAAAC,EAAQ,eAAAC,CAAe,CAAC,CAAC,CAC9D,CACJ",
  "names": ["fs", "path", "isPathToFile", "str", "ensureDirectoryExists", "dir", "copyFileSync", "source", "target", "targetDir", "copyFolderRecursiveSync", "copyWithFolder", "folder", "files", "file", "curSource", "performCopy", "targetItem", "sourceItem", "copy", "copy_default", "src_default", "source", "target", "copyWithFolder", "build", "copy_default"]
}
